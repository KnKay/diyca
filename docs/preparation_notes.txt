Do-It-Yourself Certificate Authority (diyca)
Preparation Notes

For illustrative purposes, assume that your Raspberry Pi will be using static IP address 192.168.1.103.

=======================================================
System requirements and comments
=======================================================
* Hardware
	- Architecture: Intel/AMD or ARM, 32-bit or 64-bit
	- RAM recommendation: 1GB or more
	- Recommendation: Raspberry Pi 2 or later
		(Guess: RPi earlier than 2 could be made to work)
* Operating system: Unix, Linux, or MacOSX
	(I never have tried diyca on a flavor of Intel/AMD Windows)
* No desktop is required.  E.g. Raspbian Buster Lite works just fine.  On the other hand, for occasional desktop use, Raspian Buster would be a good choice.
* Software tools
	- Python 3.x or later (Version 2 is not supported)
	- git (deb package or the rpm equivalent)
	- python3-pip (deb package or the rpm equivalent)
	- openssl (deb package or the rpm equivalent)
	- sqlite3 (deb package or the rpm equivalent)
	- dnspython, flask, pyOpenSSL, werkzeug (conda or pip3 packages) 

What follows are set up instructions for the Raspberry Pi using 
Linux distribution Raspbian Buster.

Instructions for other Linux and Unix environments are similar
but with notable differences (E.g. Fedora is RPM-based and, hence, 
uses `yum` and `rpm` utilities instead of `apt` and `dpkg`).

===============================================================
On a Linux, Mac, or Windows desktop system, prepare the MicroSD
===============================================================

* Go to https://www.raspberrypi.org/downloads/raspbian/
* Download Raspbian Buster Lite or Raspbian Buster with desktop
* Extract img from zip
* Write img to the MicroSD device:
     - Insert the MicroSD into a MicroSD adapter which has a USB plug for your desktop computer.
     - Then, insert the adapter into a USB connector on your desktop computer.
     - Make sure that the target drive is what you think it is. 
       Your desktop O/S is probably not forgiving if you accidentally overwrite something else!
       On Linux and Unix,  you can use the `mount` command without parameters 
       to show what was just mounted where.
     - For me, on Xubuntu Linux, my device turned out to be /dev/sdb and two partitions {sdb1, sdb2} were
       automounted when I inserted the adapter.
     - You must unmount any old partitions on the MicroSD drive before using a disk write tool like
       `dd` (Linux and Unix).
     - For me, on Xubuntu Linux, the following is how I proceeded:
          sudo umount /dev/sdb1     # Unmount an old boot partition
          sudo umount /dev/sdb2     # Unmount an old "/" partition
          sudo dd if=$HOME/Downloads/WHATEVER-YOU-EXTRACTED.img of=/dev/sdb bs=4M status=progress conv=fsync
     - Important to note that I used "sdb" (entire device) and not "sdb1" (partition) as the target of `dd`.

===================================================================
Set up on the Raspberry Pi target system
===================================================================

* Install MicroSD in RPi and perform 1st boot

Next, install the MicroSD card on the Pi:

    * Insert the MicroSD card into the underside slot on the Pi, gently but firmly.
    * Attach the keyboard, mouse, and monitor.
    * Finally, connect power (There is no power switch).

When it finishes the boot up process, you should see a "Welcome to Raspberry Pi" window on top of the desktop.
You are user "pi".
Click on "Next".

On the "Set Country" frame, set up the country, language, and timezone.
Click on "Next".

On the "Change Password" frame, set the new password for user pi.
Click on "Next".

On the "Set Up Screen" frame, follow the instructions about the potential black border.
Click on "Next".

On the "Update Software" frame, click on "Next".
Be patient.  This takes awhile.

On the "Setup Complete" frame, click on "Restart".
When it finishes the boot up process, you should see just the desktop.
You are user "pi".

* Set the root password:

    sudo passwd root

* Enable SSH:

   sudo raspi-config
      > 5 Interfacing Options
         > P2 SSH (Enable the SSH server)

* Set up wifi or Wired Ethernet with a fixed IP address.  
  For wired:
   1) Leave /etc/network/interfaces exactly as supplied
   2) Append /etc/dhcpcd.conf with static definitions:
			Interface eth0
			static ip_address=192.168.1.103
			static routers=192.168.1.1
			static domain_name_servers=192.168.1.1
   3) sudo reboot
   4) ifconfig   # <----- Trust but verify.

===========================================================
Update the base system since the img file was made.
Get some packages - see references at end of this document.
===========================================================

* sudo apt update

* sudo apt -y dist-upgrade   
# The above step might run like a tortoise.
# Also, if a new kernel is installed, don't bother rebooting just quite yet.

* sudo apt -y install git python3-pip openssl sqlite3

* Use conda or pip3 to install flask dnspython pyOpenSSL werkzeug

======================================================
Set up the diyca software on the Raspberry Pi
======================================================

* sudo -i

* cd /opt

* git clone https://github.com/texadactyl/diyca

* cd diyca

* Edit app_web/diyca_web.cfg
	 Change the value for PORT to whatever you want to use.
     If you wish to use 8080, then leave it alone.

* Edit bin/diyca_web_cert.cfg
	 Change the IP address in the subjectAltName variable
     to be the fixed IP address of this machine 
     i.e. where diyca is going to run.
     E.g. 192.168.1.103

* bin/1.diyca_cleanup.sh

* bin/2.diyca_calvin_init.sh

* Get a copy of Calvin's self-signed CA certificate (certs/diyca_calvin.crt) 
  onto the desktop computer where you will be using it later on with applications
  (E.g. sample applications alice and bob).
  The `rsync` utility can be used to pull the CA certificate onto another computer:

    rsync pi@192.168.1.103:/opt/diyca/certs/diyca_calvin.crt $HOME/Downloads

* bin/3.diyca_web_init.sh

* Edit /etc/rc.local - Just before the "exit 0", add the following lines:

    # Launch diyca
	cd /opt/diyca
	bin/rc.diyca.sh

======================================================
Launch DIYCA on the Raspberry Pi
======================================================

	sudo reboot

===========================================================================
The web server should be running.
Test that a browser can connect and operate.
===========================================================================

That was the server.  Now, the clients on other machines
need CA services.

Remember the CA certificate?  Time to load the certificate into a browser 
on another machine as trusted to "identify web sites" (Firefox-speak).  

*IMPORTANT* When you import the CA certificate (diyca "Calvin") into your browser, 
make sure that it goes into the trusted/authority section 
*AND* it is enabled for web server authentication.

For Firefox, this was my experience on Linux:

	Select preferences (URL = about:preferences).
	Select "Privacy & Security".
	Select "View Certificates".
	Select the "Authorities" tab and click on "Import...".
	That opens a "Select file" dialogue.
        Locate and select the diyca_calvin.crt file and click on "Open".
	Click on "Trust this CA to identify websites."
	Exit from Firefox (necessary!).
	Relaunch Firefox.

For Chrome, this was my experience on Linux:

    Click on settings.
    Select Advanced.
    Select Manage certificates.
    Click on Authorities.
    Click on IMPORT.  That starts an "Open file" dialogue.
    Locate and select the diyca_calvin.crt file and click on "Open".
    Click on "Trust this CA to identify websites."

Test: Go visit the diyca server.
Put the following in the location window of a browser on a client machine:

	https://192.168.1.103:8080

IMPORTANT - Make certain that:
* The IP address in the browser location window is an *exact* match 
to the subjectAltName value in bin/diyca_web_cert.cfg of the web server.
* The port number in the browser location window is an *exact* match 
to the PORT variable in app_web/diyca_web.cfg of the web server.

That got me to the login page which was my expectation.  If this is the first time, click on
"register" and set up a user.  When registration completes, you are automatically logged in.

Firefox on my wife's Mac laptop: Everything worked exactly as on Linux.  Note that Firefox on the Mac 
does not use the Apple keychain utility!

After importing diyca_calvin.crt with the Apple keychain utility and marking it
as trusted for web operations, I was able to access the diyca server Login menu 
from Safari and Chrome on spouse's MacOS laptop.

I have no Windows machine so I did not try a Windows browser.

======================================================
Test with the sample applications, alice and bob
======================================================

See subdirectory "example.users", file README.txt.
Follow instructions.

======================================================
External references for 3rd party tools
======================================================

* Python 3 language reference: https://docs.python.org/3/reference/
* Python 3 standard library reference: https://docs.python.org/3/library/
* Anaconda environment and conda: https://www.anaconda.com/distribution/
* Python pip3 utility: https://pip.pypa.io/en/stable/
* Python web toolkit "flask": https://palletsprojects.com/p/flask/
* OpenSSL (SSL/TLS): https://www.openssl.org/
* Python interface to OpenSSL: https://pypi.python.org/pypi/pyOpenSSL/
* "Minimalist database": http://sqlite.org/
* DNS functions for Python: http://www.dnspython.org/
* Git reference documents: https://git-scm.com/docs
* Guide to github.com: https://guides.github.com/activities/hello-world/ 

======================================================
   Docker version
======================================================

To capsulate the application from anything on the actual system and generate a more repeatable environment a docker approach is a good practice. 
This means we run the application bundled with all needs inside a container. This will give an environment which is always the same. 
Docker is well documented. It is running well on any RPI system, once you have the correct base image. The base image must match the actual processor it is using. 

Needed software
* Docker is needed to build and run the container

For any x86 debian install: 
* apt-get install docker 
On Raspbian the better way is to use the detection and setup script from docker
* curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh

Once docker is installed it can be tested using 
* docker run hello-world
There should be an cli ouput with information about docker. Once you see this, we are fine to 
install diyca using docker. 


From the root of the cloned repository we will execute
* docker build --file ./docker/rpi/Dockerfile --tag diyca . (or --file ./docker/x86/Dockerfile)

The command will tell docker, we want to create a new image. The file is holding all information about what to create. 
The tag will help us to easily start the new image. 

======================================================
  Docker file and buildprocess
======================================================

The docker file is hodling all information about the image.
The from is giving up the base. I used Balena, as it supports the RPI one the best at the moment. 

We copy the whole actual workdir over to the new image.

After this we will update apt and install what is needed to get diyca running. 
I choose python3 packages over the pip ones, as RPI had some problems getting it build. 

After the install we set up the example ca. This is done by running the scripts from bin directory. 
Please have in mind, that it will use the configuration copied over earlier. This means we have what ever 
configuration we actually use in the new container. Any change should be made prior building the docker container.

Once we started the docker build, we see what is actually running. 
All output is executed inside of the docker image. This means, we have the whole application encapsulated from what we 
have on our actual system. This proves us to have a running container which will not be impacted from local changes. 

Run the container using
* docker run -p 8080:8080 --name diyca diyca:latest

To get the root cert from the container we can copy it over using 
* docker copy diyca:/opt/diyca/certs/diyca_calvin.crt .
Uss the file like mentioned in the sections above. 


======================================================
  Docker bind mounts
======================================================

As mentioned above, the container will be created with the actuall configuration. This means, we will also have the only copy 
our new root cert inside of the container. This can be a bit of an issue.

To prevent this we can bind mount 2 folders into the container. This means we replace what ever is inside the folder on our container. 
As all is removed we need to ecreate the configuration.

For the first attempt run: 
docker run -p 8080:8080 --name diyca -v /pathtoconfif/diyca_calvin_cert.cfg:/opt/diyca/bin/diyca_calvin_cert.cfg -v /pathtocerts/:/opt/diyca/certs diyca:latest /bin/bash -c 'service rsyslog restart && cd /opt/diyca && /opt/diyca/bin/1.diyca_cleanup.sh && /opt/diyca/bin/2.diyca_calvin_init.sh && /opt/diyca/bin/3.diyca_web_init.sh && cd app_web && python3 diyca_web_main.py'
docker run -p 8080:8080 --name diyca -v /pathtoconfif/diyca_calvin_cert.cfg:/opt/diyca/bin/diyca_calvin_cert.cfg -v /pathtocerts/:/opt/diyca/certs diyca:latest /bin/bash -c 'service rsyslog restart && cd /opt/diyca/app_web && python3 diyca_web_main.py'

This gives the change to make some changes after the initial build of the container. 


The docker steps have been tested working on an RPI1. 
If any other RPI is used a look at the balena site may be needed to get a running image. 
https://www.balena.io/docs/reference/base-images/base-images/
